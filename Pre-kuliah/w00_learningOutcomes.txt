Week 00 Overview I: Learning Outcomes
---------------------------------------------------------------------------------------------
1. Explain the objectives and function of modern operating systems

Answer:
An operating system is a software that manages a computer's hardware. It is a bridge that acts as an intermediary between the computer user and the computer hardware. It allocate how much resources a software can use from the hardware.

An operating system provides an environmetn within which other programs can do useful work.

The fundamental goal of an operating system is to make solving user problems easier, which means that it seeks to enhance convenience, efficiency, and ability to evolve.

notes:
1. An operating system is vthe one program running at all times on the computer - usually called the kernel.
2. Along with the kernel, there are two other types of programs: system programs, which are associated with the operating system but are not a part of the kernel and application programs, which include all programs not associated with the operating system.
3. Mobile operating systems often include not only a core kernel but also middleware (a set of software frameworks that provide additional service to application developers).
---------------------------------------------------------------------------------------------
2. Analyze the tradeoffs inherent in operating system design

Answer:
Because an operating system is a software that allocate resources of the hardware to be used by a certain software, it must be able to communicate between the two.

To communicate, a link must be made so that it can send and receive message. The problem isn't in how it is implemented physically, but how it is implemented logically.

Imagine a program that prints "Hello World", how would this be shown? Where would the message be printed? It could be printed to a windor, or to a console, or even to a graphics memory. Even then, how does the data then ends up there? 

Depending on how this communication bridge is made logically, they will vary differently on how to run even the "simplest" of code.

Several methods for logically implementing this link of send and receive operations are Direct/Indirect communication, Synchronous/Asynchronous communication, and Automatic/explicit buffering, each with their own tradeoffs from the others. 

---------------------------------------------------------------------------------------------
3. Describe the functions of a contemporary operating system with respect to convenience, efficiency, and the ability to evolve.

Answer:
From the user point of view, many of these users sit with a laptop or in front of a PC consisting of a monitor, keyboard, and mouse. Such a system is designed for one user to monopolize its resources. The goal is to maximize the work that the user is performing. In this case, the OS is designed mostly for ease of use (convenience) and not a lot to resource utilization (efficiency)

From the system's view, the operating system is the program most intimately involved with the ardware. In this context, an OS has a job of allocating resources, which means it is designed for resource utilization (efficiency).

An OS can change over time because of new hardware technology, new demands, or simply fixes. This means that an OS is ever changing and requires constant update. Without the ability to evolve, an OS will become obsolete in a few years if we are optimistic.

---------------------------------------------------------------------------------------------
4. Discuss network, client-server, distributed operating systems and how they differ from single user operating systems.

Answer:
Network OS:
Systems run on a server and provide the capability to manage data, users, groups, security, applications, and other networking functions. These types of operating system allow shared access of files, printers, security, applications, and other networking functions over a small private network.

Distributed OS:
Various autonomous interconnected computers communicate with each other using a shared communication network. Independent system possess their own memory unit and CPU. Also known as loosely coupled systems.

Client/Server OS:
A single server gets requests from the client and the server answer the requests and allocate resources for each client's request.

Single User OS vs Many User OS:
A single user OS has a super user that gets all the powers of maintaining the system and making changes to ensure the system runs smoothly while multi-user OS user has control over their own work.

A single user OS only perform one task at one time, while many user OS schedules different tasks for performance at any rate.

Example of single user OS: Windows, Apple Mac OS
Example of many user OS: UNIX, Linux and Mainframes

---------------------------------------------------------------------------------------------
5. Identify potential threats to operating systems and the security features design to guard against them.

Answer:
List of security problems to OS are breach of confidentiality, breach of integrity, breach of availability, theft of service, and denial of service.

There are many way these breaches can happen. One of them are program threats, with the infamous program of the Trojan Horse. The other type is a virus. The third type are system and network threats that takes a form called a worm.

Cryptography can be used to solve some of these problem, especially for the most common one which is breach of confidentiality (information theft). This is done by encryption.

Authentication is another defense mechanism often used to protect the system from attacks by identifying the entity who transmitted the message.

---------------------------------------------------------------------------------------------
6. Explain the concept of a logical layer.

Answer:
The logical layer of an OS is the layer that tells what component can communicate with what component directly. For example, layer 0 (which is the hardware) can only communicate with the layer above with (layer 1) and cannot communicate with the UI (which could be layer N).

With a logical layer, it helps development such that when a problem occur is a layer, we know that the layer below it isn't the cause, because the layer below it is confirmed to not be the problem by prior debugging before entering the present layer's development.

Each layer is implemented only with operations provided by lower-level layers. A layer does not need to know how these operations are implemented; it needs to know only what these operations do.

---------------------------------------------------------------------------------------------
7. Explain the benefits of building abstract layers in hierarchical fashion.

Answer:
Building abstract layers in hierarchical fashion ensures that a certain layer can only communicate with the layer directly above or below it. This makes it easier to build and debug, because when a problem occurs, the source of the problem can be identified quicker.

---------------------------------------------------------------------------------------------
8. Describe the value of APIs and middleware.

Answer:
A middleware is a set of software frameworks that provide additional service to application developers that supports a lot of different functionality such as databases, multimedia, and graphics to name only a few. In essense, it is used to connect otherwise separate applications.

An API (Application programming interface) on the other hand is required by applications to perform key functions such as accessing the file system on a program. The API also determines the appropriate method for a developer to request service from that program.

both APIs and Middleware help makes the development progress to be completed much faster without costing any quality issues.

---------------------------------------------------------------------------------------------
9. Describe how computing resources are used by application software and managed by system software.

Answer:
Application software is any software that is not associated with the operating system. This means that this is the software that is used to perform some sort of specified task and thus request resources from the OS.

On the process of accepting and handling the request from an application software, an OS is helped by a system softwares which are associated with the operating system but are not a part of the kernel.

---------------------------------------------------------------------------------------------
10. Contrast kernel and user mode in an operating system.

Answer:
1. Kernel Mode
In kernel mode, the executing code has complete and unrestricted access to the underlying hardware. It can execute any CPU instruction and reference any memory address. Kernel mode is generally reserved for the lowest-level, most trusted functions of the OS. Crashes in kernel mode are catastrophic; they will halt the entire PC.

2. User Mode
In User mode, the executing code has not ability to directly access hardware or reference memory. Code running in user mode must delegate to system APIs to access hardware or memory. Due to the protection afforded by this sort of isolation, crashes in user mode are always recoverable. Most of the code running on your computer will execute in user mode.

---------------------------------------------------------------------------------------------
11. Discuss the advantages and disadvantages of using interrupt processing.

Answer:
The advantages of using interrupt is that it is fast and efficient. While the disadvantages of using these interrupt is that it can be tricky to write, especially while using a low level language. It can also be tough to get various pieces to work well together.

Using interrupt processing creates 2 main design issues, which are:
(1) There are multiple I/O modules, how should the processor determine the device that issued the interrupt signal?
(2) How does the processor decide which module to process when multiple interrupts have occured?

Of course, there are ways to counter these problems which is known as the 4 general categories of techniques that are commonly used in I/O interrupt, which are:
(1) Multiple Interrupt Lines
	Allows multiple modules to be handled at the same time. However it is not practical to assign many bus lines and processor pins to interrupt lines. One of the reasons is that there might be more than one I/O module attached to a single line.
(2) Software Poll
	Whenever an interrupt is detected by the processor, it branches to an interrupt service routine which will pool each and every I/O module to determine the exact interrupting module. Because it pool each and every I/O module, this technique is time consuming.
(3) Daisy Chain (Hardware Poll, Vectored)
	Also known as a hardware poll, the interrupt acknowledge line is daisy chained to all the modules. Whenever there is an interrupt, the processor send out an interrupt acknowledge which will propagate throughout the series of I/O modules. This technique completely removes the need for interrupt-service routine.
(4) Bus Arbitration (Vectored)
	This method allows the I/O module to gain control over the bus before requestiong for the interrupt. This is limited to only one module at a time. The processor sends an acknowledge signal whenever it detects an interrupt.

However, when there are mutiple interrupts at a single time, there will be a need to assign priorities. Each of these methods above have their own way of assigning priorities.
---------------------------------------------------------------------------------------------
12. Explain the use of a device list and driver I/O queue.

Answer:
Management of I/O devices is a very important part of the OS - so important and so varied that entire I/O subsystems are devoted to its operation.

Device drivers are modules that can be plugged into an OS to handle a particular device or category of similar devices.

I/O Subsystems must then contend with two trends: Either towards the standard interface for a wide range of devices, makign it easier to add newly developed devices to the existing systems, or develop an entirely new types of devices, for which the existing standard interface are not always easy to apply.

A device list tells the OS what I/O device is being used and how should it process the data it receives and how it should display how the data is being received. Without it, an OS cannot work properly. Imagine a headset being categorized as a mouse, the OS isn't capable of doing anything with it.



---------------------------------------------------------------------------------------------